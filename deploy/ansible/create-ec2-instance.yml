---
- name: create AWS EC2 instance for deployment        
  hosts: localhost
  connection: local
  user: test
  gather_facts: false

  tasks:
    # Create EC2 key
    - name: create EC2 key
      ec2_key:
        name: website_access_key
        region: us-east-2
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
      register: ec2_key

    # Save EC2 key locally
    - name: save private key
      copy: content="{{ ec2_key.key.private_key }}" dest="../aws-private.pem" mode=0600
      when: ec2_key.changed
  
    # Create AWS security group to control access to new instance
    - name: create security group
      ec2_group:
        name: website_access_group
        description: access to the website servers
        region: us-east-2
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
        #  - proto: tcp
        #    from_port: 80
        #    to_port: 80
        #    cidr_ip: 0.0.0.0/0
            
    # Create new AWS EC2 instance      
    - name: create EC2 instance
      ec2:
        key_name: website_access
        group: webserver_access_group
        instance_type: t2.micro
        image: ami-10547475
        wait: true
        count: 1
        region: us-east-2
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
      register: ec2
      
    # Add newly-created instance to hosts group
    - name: add public IP from new instance to hosts group
      add_host: hostname={{ item.public_ip }} groups=ec2hosts ansible_ssh_user=ubuntu ansible_ssh_private_key_file=../aws-private.pem
      with_items: "{{ ec2.instances }}"
      
  #    - name: Add the newly created EC2 instance(s) to host group
  #lineinfile: dest={{ hostpath }}
  #            regexp={{ item.public_ip }} 
  #            insertafter="[webserver]" 
  #            line="{{ item.public_ip }} {{hoststring}}"
  #            state=present
  #with_items: ec2.instances
      
#    - name: add authorized key
#      authorized_key:
#        user: test
#        state: present
#        key: "{{ lookup('file', '/home/test/Downloads/website_access.pem') }}"

    # Mitigate prompt asking to accept server's fingerprint
    - name: accept new ssh fingerprints                                         
      shell: ssh-keyscan -H {{ item.public_ip }} >> /home/test/.ssh/known_hosts          
      with_items: '{{ ec2.instances }}'
      
    # Wait for SSH on remote host to become present
    #- name: wait for SSH to come up
    #  wait_for:
    #    host: "{{ item.public_dns_name }}"
    #    port: 22
    #    delay: 60
    #    timeout: 180 #320
    #    state: started
    #  with_items: "{{ ec2.instances }}"
    
# Invoke host setup play 
#- name: invoke deploy-website play
#  hosts: ec2hosts
#  user: ubuntu
#  gather_facts: true
#  tasks:
#    - name: import deploy-website.yml
#      #import_playbook: deploy-website.yml
#      include_playbook: deploy-website.yml
      
# Test newly-created instance      
- name: test hosts group
  hosts: ec2hosts
  user: ubuntu
  gather_facts: true
  ignore_errors: true
  tasks:
     # Execute pwd shell command to test connection
     - name: print working directory
       shell: pwd 
       ignore_errors: true    

# Terminate instances
- name: terminate instances
  hosts: localhost
  connection: local
  gather_facts: false
  ignore_errors: true
  tasks:
    # Terminate all instances in hosts group
    - name: terminate instances in hosts group
      ec2:
        state: 'absent'
        wait: true
        instance_ids: '{{ ec2.instance_ids }}'
        region: us-east-2
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
