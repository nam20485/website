---
- name: create AWS EC2 instance for deployment        
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    # Include variables
    - name: include variables
      include_vars: vars.yml
  
    # Create EC2 key
    - name: create EC2 key
      ec2_key:
        name: webserver_access_key
        region: "{{aws_region}}"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
      register: ec2_key

    # Save EC2 key locally
    - name: save key
      copy: content="{{ ec2_key.key.private_key }}" dest="./webserver_access.pem" mode=0600
      when: ec2_key.changed
  
    # Create AWS security group to control access to new instance
    - name: create security group
      ec2_group:
        name: webserver_access_group
        description: access to the website server
        region: "{{aws_region}}"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        rules:
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            
    # Create new AWS EC2 instance      
    - name: create EC2 instance
      ec2:
        key_name: webserver_access_key
        group: webserver_access_group
        instance_type: t2.micro
        image: "{{aws_image}}"
        wait: true
        region: "{{aws_region}}"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
        #state: running
        count: 1
        #exact_count: 1
        #count_tag: 
        #    webserver: webserver
        instance_tags:
            webserver: webserver    
      register: ec2
      
    # Add newly-created instance to hosts group
    - name: add instance to hosts group
      add_host: 
        name: "{{ item.public_dns_name }}"
        groups: ec2hosts
        ansible_ssh_user: ubuntu
        ansible_ssh_private_key_file: ./webserver_access.pem
        ansible_python_interpreter: /usr/bin/python3
      with_items: "{{ ec2.instances }}"
      
    # Mitigate prompt asking to accept server's fingerprint
    - name: add authorized key 
      shell: ssh-add ./webserver_access.pem  
      with_items: '{{ ec2.instances }}'
      
    # Mitigate prompt asking to accept server's fingerprint
    # - name: add    
    #  shell: ssh-keyscan -H "{{ item.public_dns_name }}" >> /home/test/.ssh/known_hosts          
    #  with_items: '{{ ec2.instances }}'
      
    # Wait for SSH on remote host to become present
    - name: wait for SSH
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        timeout: 320
        state: started
      with_items: "{{ ec2.instances }}"

#      
# Test instance      
#
- name: test hosts group
  hosts: ec2hosts
  user: ubuntu
  gather_facts: true
  ignore_errors: true
  tasks:
     # Execute pwd shell command to test connection
     - name: print working directory
       shell: pwd 
       ignore_errors: true  
     #- name: import deploy-website.yml
#    #  import_playbook: deploy-website.yml
#    #  include_playbook: deploy-website.yml

#
# Terminate instance
#
- name: terminate instances
  hosts: localhost
  connection: local
  gather_facts: false
  ignore_errors: true
  tasks:
    # Terminate all instances in hosts group
    - name: terminate instances in hosts group
      ec2:
        state: 'absent'
        wait: true
        instance_ids: '{{ ec2.instance_ids }}'
        region: "{{aws_region}}"
        aws_access_key: "{{aws_access_key}}"
        aws_secret_key: "{{aws_secret_key}}"
